
import psycopg2
from config import POSTGRES_URL, d1_questions
from psycopg2 import sql
from tg import send_message
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã participants
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS participants (
            tg_id BIGINT PRIMARY KEY,
            chat_id BIGINT,
            counter INTEGER,
            tg_nickname TEXT,
            tg_user TEXT,
            email TEXT,
            education TEXT,
            interests TEXT,    
            start_time TEXT,
            resume TEXT
        );
        """)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã questions_day_1
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS questions_day_1 (
            tg_id BIGINT PRIMARY KEY,
            question_1 TEXT,
            question_2 TEXT,
            question_3 TEXT,
            question_4 TEXT,
            question_5 TEXT,
            finished BOOLEAN DEFAULT FALSE
        );
        """)

        conn.commit()
        cursor.close()
        conn.close()
        print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


def user_exists(chat_id, tg_id):
    exists = False
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(POSTGRES_URL)
        cursor = conn.cursor()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = """
        SELECT finished
        FROM questions_day_1
        WHERE tg_id = %s;
        """
        cursor.execute(query, (tg_id,))
        result = cursor.fetchone()

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –∏ —Å—Ç–∞—Ç—É—Å finished —Ä–∞–≤–µ–Ω true
        if result and result[0]:
            correct_answers = get_results(tg_id)
            max_index = len(d1_questions)
            send_message(chat_id, f"–û–π, –∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã ({correct_answers}/{max_index}) üôà\n"
                                  "–ü—Ä–æ—Å—Ç–∏, –Ω–æ –ø—Ä–æ–π—Ç–∏ –ö–í–ò–ó –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–æ –∑–∞—Ç–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å–≤–æ–µ —Ä–µ–∑—é–º–µ!")
            exists = True
        cursor.close()
        conn.close()
        return exists

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def get_results(tg_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(POSTGRES_URL)
        cursor = conn.cursor()

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id
        query = """
        SELECT * FROM questions_day_1 WHERE tg_id = %s;
        """
        cursor.execute(query, (tg_id,))
        result = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º tg_id –∏ finished=True –Ω–∞–π–¥–µ–Ω
        if result:
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {result}")
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, question_1, question_2, ...)
            count_true = 0
            for i in range(0, len(d1_questions)):
                if result[i+1] == "true":  # –ò–Ω–¥–µ–∫—Å 0 - tg_id, 1 - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    count_true += 1
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {count_true}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor.close()
            conn.close()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            return count_true

        else:
            cursor.close()
            conn.close()
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–≤–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return 0  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–≤–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return 0
    
def count_users():
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(POSTGRES_URL)
        cursor = conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ "counter"
        query = """
        SELECT MAX(counter) FROM participants;
        """
        cursor.execute(query)
        result = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if result and result[0] is not None:
            return result[0]
        else:
            print("–í —Ç–∞–±–ª–∏—Ü–µ participants –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ counter.")
            return 0

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        return 0
    
def get_winner(counter):
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(POSTGRES_URL)
        cursor = conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ "counter"
        query = """
        SELECT chat_id, tg_nickname FROM participants where counter = %s;
        """
        cursor.execute(query, counter)
        result = cursor.fetchone()
        print(result)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if result:
            return result[1], result[0]
        else:
            print("–í —Ç–∞–±–ª–∏—Ü–µ participants –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ counter.")
            return 0

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
        return 0
        