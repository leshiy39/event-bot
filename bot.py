import os
import random
import requests
import time
import json
from datetime import datetime
import psycopg2
from psycopg2 import sql
from config import TOKEN, POSTGRES_URL, d1_questions, admin_ids
from db import *
from participants import *
from quiz import start_quiz
from tg import *
from files import *


def init(chat_id, user_states):
    user_states = {}
    user_states.pop(chat_id, None)
    welcome_message = ("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ‚ò∫Ô∏è\n"
                    "–ú—ã –ø–æ–ø—Ä–æ—Å–∏–º —Ç–µ–±—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
                    "–í 14:00 —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –º—ã –≤—ã–±–µ—Ä–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.\n"
                    "–ü–æ–µ—Ö–∞–ª–∏?")
    send_message_with_button(chat_id, welcome_message, [
        {"text": "–î–∞", "action": "continue_dialog"},
        {"text": "–ù–µ—Ç", "action": "decline_dialog"}
    ])

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
def main():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    offset = None
    chat_id=''
    user_states = {}
    waiting_for_quiz = {}
    while True:
        try:    
            try:
                updates = get_updates(offset)
                print(updates)
            except RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API: {e}")
            if updates.get("ok"):
                for update in updates.get("result", []):
                    offset = update["update_id"] + 1
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
                    if "kicked" in str(update):
                        print(f"–ë–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {update}")
                        break
                    if "edited_message" in update:
                        chat_id = update["edited_message"]["chat"]["id"]
                        print('edited')
                        send_message(chat_id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –í—ã–Ω—É–∂–¥–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—à—É —Å–µ—Å—Å–∏—é –∏ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start")
                        break
                    if "callback_query" in update:
                        print('callback_query')
                        callback_query = update["callback_query"]
                        chat_id = callback_query["message"]["chat"]["id"]
                        tg_id = callback_query["from"]["id"]
                        tg_nickname = callback_query["from"].get("username", "None")
                        data = callback_query["data"]
                        if user_exists(chat_id, tg_id): 
                            break
                        else:
                            print(update)
                            if "/start" in str(update):
                                init(chat_id, user_states)
                            if chat_id in waiting_for_quiz:
                                process_answer, quiz_state = waiting_for_quiz[chat_id]
                                result = process_answer(data)
                                if result == "completed":  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
                                    waiting_for_quiz.pop(chat_id)

                            if data == "continue_dialog":
                                start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                counter = count_users()
                                save_participant(tg_id, chat_id, tg_nickname, start_time, counter)
                                send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! \n–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è üë§")
                                user_states[chat_id] = {"state": "waiting_for_name", "tg_id": tg_id}

                            elif data == "decline_dialog":
                                send_message(chat_id, "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /start üòä")
                                user_states.pop(chat_id, None)

                            elif data.startswith("interest_"):
                                interest = data.replace("interest_", "")
                                tg_id = user_states[chat_id]["tg_id"]
                                if interest == "other":
                                    send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
                                    user_states[chat_id]["state"] = "waiting_for_interest_other"
                                else:
                                    update_participant(tg_id, "interests", interest)
                                    # send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. üéâ")
                                    # –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑
                                    process_answer, quiz_state = start_quiz(chat_id, tg_id)
                                    waiting_for_quiz[chat_id] = (process_answer, quiz_state)
                                    user_states.pop(chat_id, None)
                            # elif data.startswith("d1_"):

                    elif "document" in update["message"]:
                        # chat_id = update["message"]["chat"]["id"]
                        tg_id = update["message"]["from"]["id"]
                        tg_nickname = update["message"]["from"].get("username", "None")
                        file_id = update["message"]["document"]["file_id"]

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        try: 
                            save_resume(tg_id, tg_id, tg_nickname, file_id)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
                            send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    elif any(key in update["message"] for key in ["photo", "video", "audio", "voice", "animation", "sticker", "location", "contact", "document"]):
                        chat_id = update["message"]["chat"]["id"]
                        tg_id = update["message"]["from"]["id"]
                        send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ–∑—é–º–µ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    elif "message" in update:
                        chat_id = update["message"]["chat"]["id"]
                        text = update["message"].get("text", "").strip()
                        if text == "/start":
                            init(chat_id, user_states)
                        elif text == "/count" and chat_id in admin_ids:
                            users_amount = count_users()
                            send_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_amount}")

                        elif "/winner" in text and chat_id in admin_ids:
                            try:
                                chat_id = update["message"]["chat"]["id"]
                                if text == "/winner":
                                    send_message(chat_id, "–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
                                else:
                                    counter = text.split()[1]
                                    winner_nickname, winner_chat_id, winner_name = get_winner(counter)
                                    send_message(f"{chat_id}", f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name} (@{winner_nickname})")
                                    # send_message(f"{winner_chat_id}", f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í–∞—à –Ω–æ–º–µ—Ä: {counter}")
                            except Exception as e:
                                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                                chat_id = update["message"]["chat"]["id"]
                                user_states.pop(chat_id, None)
                        elif chat_id in user_states:
                            state_info = user_states[chat_id]
                            tg_id = state_info["tg_id"]
                            state = state_info["state"]

                            if state == "waiting_for_name":
                                update_participant(tg_id, "tg_user", text)
                                send_message(chat_id, "–£–∫–∞–∂–∏ –ø–æ—á—Ç—É üìß")
                                state_info["state"] = "waiting_for_email"

                            elif state == "waiting_for_email":
                                update_participant(tg_id, "email", text)
                                send_message(chat_id, "–ü—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è üéì")
                                state_info["state"] = "waiting_for_education"

                            elif state == "waiting_for_education":
                                update_participant(tg_id, "education", text)
                                send_message_with_button(chat_id, "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?", [
                                    {"text": "–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "action": "interest_project_management"},
                                    {"text": "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è", "action": "interest_law"},
                                    {"text": "SMM", "action": "interest_smm"},
                                    {"text": "HR", "action": "interest_hr"},
                                    {"text": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û", "action": "interest_software"},
                                    {"text": "–î—Ä—É–≥–æ–µ", "action": "interest_other"}
                                ])
                                state_info["state"] = "waiting_for_interest"

                            elif state == "waiting_for_interest_other":
                                update_participant(tg_id, "interests", text)
                            elif chat_id in waiting_for_quiz:
                                process_answer = waiting_for_quiz[chat_id]
                                process_answer(data)
                                if current_question["index"] >= len(d1_questions):
                                    waiting_for_quiz.pop(chat_id)

                        else:
                            send_message(chat_id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üò¢")
                    else:
                        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                        user_states.pop(chat_id, None)
            time.sleep(1)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            user_states.pop(chat_id, None)

if __name__ == "__main__":
    main()
